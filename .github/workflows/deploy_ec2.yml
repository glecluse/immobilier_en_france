name: Déploiement EC2

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v2

      - name: Configuration de Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Installation des dépendances
        run: pip install -r requirements.txt

      - name: Exécution des tests unitaires
        run: python -m unittest discover -s test_login

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout du code
        uses: actions/checkout@v2

      - name: Configuration des clés SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/ec2_private_key.pem
          chmod 600 ~/.ssh/ec2_private_key.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Création du dossier sur EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_private_key.pem ubuntu@${{ secrets.EC2_HOST }} "mkdir -p ~/immobilier_en_france/"

      - name: Copie des fichiers vers EC2
        run: |
          # Créer un répertoire temporaire pour la copie
          TEMP_DIR=$(mktemp -d)
          cp -R . $TEMP_DIR
          cd $TEMP_DIR

          # Supprimer les répertoires non nécessaires
          rm -rf .git .github

          # Copier chaque fichier individuellement
          find . -type f -name "*.py" -o -name "*.txt" -o -name "*.csv" -o -name "*.yaml" -o -name "*.md" | while read file; do
            scp -o StrictHostKeyChecking=no -i ~/.ssh/ec2_private_key.pem "$file" ubuntu@${{ secrets.EC2_HOST }}:~/immobilier_en_france/"$file"
          done

      - name: Redémarrage de l'application sur EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_private_key.pem ubuntu@${{ secrets.EC2_HOST }} "cd ~/immobilier_en_france/ && \
          if pgrep -f 'streamlit run main.py'; then \
            pkill -f 'streamlit run main.py'; \
            sleep 3; \
          fi && \
          if [ -d 'venv' ]; then \
            source venv/bin/activate && \
            pip install --upgrade -r requirements.txt && \
            nohup streamlit run main.py --server.port 8501 > output.log 2>&1 & \
            deactivate; \
          else \
            echo 'Erreur : Le virtualenv venv n existe pas.'; \
            exit 1; \
          fi"
